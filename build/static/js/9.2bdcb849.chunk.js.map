{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/react-hook-form/dist/react-hook-form.es.js","../node_modules/@material-ui/core/esm/Button/Button.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","isUndefined","val","isNullOrUndefined","isArray","Array","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","EVENTS","INPUT_VALIDATION_RULES","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","attachEventListeners","field","handleChange","isRadioOrCheckbox","ref","addEventListener","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","get","obj","defaultValue","split","filter","Boolean","focusErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","type","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","isEmptyObject","keys","castPath","parent","updatePath","baseGet","array","start","end","baseSlice","unset","paths","forEach","childObject","previousObjRef","k","slice","objectRef","currentPaths","currentPathsLength","item","baseUnset","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","fieldValue","disconnect","defaultReturn","isValid","getRadioValue","checked","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","map","attributes","getFieldValue","files","selected","isString","getFieldsValues","search","output","isSearchString","isSearchArray","isNest","nest","startsWith","find","isSameError","types","message","objectA","objectB","objectAData","objectBData","compareObject","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isFunction","isBoolean","isMessage","isValidElement","getValidateError","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","a","required","maxLength","minLength","min","max","pattern","validate","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validationResult","validateFunction","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","context","abortEarly","getDefaultValue","defaultValues","isPrimitive","getPath$1","parentPath","flatArray","list","b","concat","getPath","getInnerPath","pathWithIndex","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","add","skipValidation","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","prev","isFileListObject","FileList","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","modeChecker","mode","isRadioOrCheckboxFunction","useRef","React","useState","useCallback","useEffect","useForm","reValidateMode","validationContext","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","validationContextRef","fieldArrayNamesRef","render","isWindowUndefined","shouldValidateCallback","isWeb","isProxyEnabled","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","shouldRenderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldArray","previousDirtyFieldsLength","size","isDirty","fieldArrayName","substring","indexOf","isDirtyChanged","setDirtyAndTouchedFields","setInternalValueBatch","parentFieldName","isValueArray","setInternalValue","executeValidation","executeSchemaValidation","payload","previousFormIsValid","triggerValidation","all","every","isFieldWatched","setValue","valueOrShouldValidate","shouldValidate","isMultiple","isStringFieldName","target","currentError","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validateSchemaIsValid","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","unregister","registerFieldsRef","validateOptions","console","warn","fieldAttributes","currentField","isEmptyDefaultValue","fieldToAttachListener","register","refOrValidationOptions","validationOptions","handleSubmit","callback","e","preventDefault","persist","fieldError","resetRefs","reset","omitResetState","inputRef","closest","_a","resetFieldArray","getValues","outputValues","formState","control","Proxy","prop","createContext","Button","props","children","classes","className","_props$color","color","_props$component","component","_props$disabled","disabled","_props$disableElevati","disableElevation","_props$disableFocusRi","disableFocusRipple","endIconProp","endIcon","focusVisibleClassName","_props$fullWidth","fullWidth","_props$size","startIconProp","startIcon","_props$type","_props$variant","variant","other","_objectWithoutProperties","clsx","capitalize","ButtonBase","_extends","root","colorInherit","focusRipple","focusVisible","label","withStyles","theme","typography","button","boxSizing","minWidth","padding","borderRadius","shape","palette","text","primary","transition","transitions","create","duration","short","textDecoration","backgroundColor","fade","action","hoverOpacity","width","display","alignItems","justifyContent","textPrimary","main","textSecondary","secondary","outlined","border","disabledBackground","outlinedPrimary","outlinedSecondary","contained","getContrastText","grey","boxShadow","shadows","A100","containedPrimary","contrastText","dark","containedSecondary","borderColor","textSizeSmall","fontSize","pxToRem","textSizeLarge","outlinedSizeSmall","outlinedSizeLarge","containedSizeSmall","containedSizeLarge","sizeSmall","sizeLarge","marginRight","marginLeft","iconSizeSmall","iconSizeMedium","iconSizeLarge"],"mappings":"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","file":"static/js/9.2bdcb849.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import * as React from 'react';\nimport { isValidElement, createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, cloneElement, Fragment } from 'react';\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({ field, handleChange, isRadioOrCheckbox, }) {\r\n    const { ref } = field;\r\n    if (isHTMLElement(ref) && ref.addEventListener && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => !!element && element.type === 'radio';\n\nvar isCheckBoxInput = (element) => !!element && element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const childObject = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    const result = !(childObject != null) || delete childObject[key];\r\n    let previousObjRef = undefined;\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index) {\r\n                if (isObject(objectRef) && isEmptyObject(objectRef)) {\r\n                    previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n                }\r\n                else if (isArray(objectRef) &&\r\n                    !objectRef.filter(data => isObject(data) && !isEmptyObject(data))\r\n                        .length) {\r\n                    if (previousObjRef) {\r\n                        delete previousObjRef[item];\r\n                    }\r\n                }\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach(path => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    if (!field) {\r\n        return;\r\n    }\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options\r\n                .filter(Boolean)\r\n                .forEach(({ ref, mutationWatcher }, index) => {\r\n                if ((ref && isDetached(ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    unset(options, [`[${index}]`]);\r\n                }\r\n            });\r\n            if (options && !options.filter(Boolean).length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.filter(Boolean).reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => !!element && element.type === 'file';\n\nvar isMultipleSelect = (element) => !!element && element.type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    const isSearchString = isString(search);\r\n    const isSearchArray = isArray(search);\r\n    const isNest = search && search.nest;\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            isNest ||\r\n            (isSearchString && name.startsWith(search)) ||\r\n            (isSearchArray &&\r\n                search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\r\n    const objectAData = Object.entries(objectA);\r\n    const objectBData = Object.keys(objectB);\r\n    return (objectAData.length === objectBData.length &&\r\n        objectAData.reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true));\r\n};\n\nvar isSameError = (error, { type, types, message, }) => {\r\n    return (isObject(error) &&\r\n        error.type === type &&\r\n        error.message === message &&\r\n        compareObject(error.types, types));\r\n};\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isValueMessage = (value) => isObject(value) && !isRegex(value);\r\n    return isValueMessage(validationData)\r\n        ? validationData\r\n        : {\r\n            value: validationData,\r\n            message: '',\r\n        };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isMessage = (value) => isString(value) || (isObject(value) && isValidElement(value));\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        const message = isMessage(result) ? result : '';\r\n        return {\r\n            type,\r\n            message,\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (!validateAllFieldCriteria) {\r\n        return {};\r\n    }\r\n    const error = errors[name];\r\n    return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\r\n        const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: previous[path] || Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name])\r\n    ? get(defaultValues, name, defaultValue)\r\n    : defaultValues[name];\n\nfunction flatArray(list) {\r\n    return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach(name => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? getDefaultValue(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnChange, hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnChange && isBlurEvent) ||\r\n    (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\r\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);\n\nvar isFileListObject = (data) => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nconst { useRef, useState, useCallback, useEffect } = React;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const fieldArrayDefaultValues = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const validationContextRef = useRef(validationContext);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit, isOnChange } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateCallback = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb && 'Proxy' in window;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateCallback) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateCallback]);\r\n    const setFieldValue = useCallback((field, rawValue) => {\r\n        const ref = field.ref;\r\n        const options = field.options;\r\n        const { type } = ref;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isEmptyString(value) ||\r\n                isFileListObject(value)) {\r\n                ref.files = value;\r\n            }\r\n            else {\r\n                ref.value = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return !!type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        let isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        if (isFieldArray) {\r\n            const fieldArrayName = name.substring(0, name.indexOf('['));\r\n            isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    };\r\n    const setDirtyAndTouchedFields = useCallback((fieldName) => {\r\n        if (setDirty(fieldName) ||\r\n            (!get(touchedFieldsRef.current, fieldName) &&\r\n                readFormStateRef.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, fieldName, true);\r\n        }\r\n    }, []);\r\n    const setInternalValueBatch = useCallback((name, value, parentFieldName) => {\r\n        const isValueArray = isArray(value);\r\n        for (const key in value) {\r\n            const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\r\n            if (isObject(value[key])) {\r\n                setInternalValueBatch(name, value[key], fieldName);\r\n            }\r\n            const field = fieldsRef.current[fieldName];\r\n            if (field) {\r\n                setFieldValue(field, value[key]);\r\n                setDirtyAndTouchedFields(fieldName);\r\n            }\r\n        }\r\n    }, [setFieldValue, setDirtyAndTouchedFields]);\r\n    const setInternalValue = useCallback((name, value) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            setFieldValue(field, value);\r\n            const output = setDirtyAndTouchedFields(name);\r\n            if (isBoolean(output)) {\r\n                return output;\r\n            }\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValueBatch(name, value);\r\n        }\r\n    }, [setDirtyAndTouchedFields, setFieldValue, setInternalValueBatch]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n        shouldRenderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach(name => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            shouldRenderBaseOnError(payload, (get(errors, payload)\r\n                ? { [payload]: get(errors, payload) }\r\n                : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateCallback) {\r\n            return executeSchemaValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateCallback,\r\n    ]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    function setValue(names, valueOrShouldValidate, shouldValidate) {\r\n        let shouldRender = false;\r\n        const isMultiple = isArray(names);\r\n        (isMultiple\r\n            ? names\r\n            : [names]).forEach((name) => {\r\n            const isStringFieldName = isString(name);\r\n            shouldRender =\r\n                setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName\r\n                    ? valueOrShouldValidate\r\n                    : Object.values(name)[0]) || isMultiple\r\n                    ? true\r\n                    : isFieldWatched(name);\r\n        });\r\n        if (shouldRender || isMultiple) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate || (isMultiple && valueOrShouldValidate)) {\r\n            triggerValidation(isMultiple ? undefined : names);\r\n        }\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isOnChange,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (shouldValidateCallback) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldUpdateState = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationResolver]);\r\n    const removeFieldEventListener = (field, forceDelete) => {\r\n        if (!isUndefined(handleChangeRef.current) && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    };\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [\r\n            name,\r\n        ]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach(data => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateCallback) {\r\n                validateSchemaIsValid();\r\n            }\r\n        }\r\n    }, [reRender, shouldValidateCallback, validateSchemaIsValid]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isDirtyRef.current\r\n            ? {}\r\n            : isUndefined(defaultValue)\r\n                ? isUndefined(defaultValuesRef.current)\r\n                    ? {}\r\n                    : defaultValuesRef.current\r\n                : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (!isEmptyObject(combinedDefaultValues)) {\r\n            readFormStateRef.current.dirty = true;\r\n        }\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) || combinedDefaultValues;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        let currentField = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray = false;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options\r\n                    .filter(Boolean)\r\n                    .find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\r\n            currentField = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = getDefaultValue(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(currentField, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateCallback &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultRenderValuesRef.current[name] = isEmptyDefaultValue\r\n                ? getFieldValue(fields, currentField.ref)\r\n                : defaultValue;\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        attachEventListeners({\r\n            field: fieldToAttachListener,\r\n            isRadioOrCheckbox,\r\n            handleChange: handleChangeRef.current,\r\n        });\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        let fieldValues = {};\r\n        const fields = fieldsRef.current;\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateCallback) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fields)) {\r\n                    if (field) {\r\n                        const { ref, ref: { name }, } = field;\r\n                        const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            validFieldsRef.current.delete(name);\r\n                        }\r\n                        else {\r\n                            if (fieldsWithValidationRef.current.has(name)) {\r\n                                validFieldsRef.current.add(name);\r\n                            }\r\n                            fieldValues[name] = getFieldValue(fields, ref);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError && isWeb) {\r\n                    focusErrorField(fields, fieldErrors);\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateCallback,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = ({ errors, dirty, isSubmitted, touched, isValid, submitCount, }) => {\r\n        fieldsRef.current = {};\r\n        if (!errors) {\r\n            errorsRef.current = {};\r\n        }\r\n        if (!touched) {\r\n            touchedFieldsRef.current = {};\r\n        }\r\n        if (!isValid) {\r\n            validFieldsRef.current = new Set();\r\n            fieldsWithValidationRef.current = new Set();\r\n            isValidRef.current = true;\r\n        }\r\n        if (!dirty) {\r\n            dirtyFieldsRef.current = new Set();\r\n            isDirtyRef.current = false;\r\n        }\r\n        if (!isSubmitted) {\r\n            isSubmittedRef.current = false;\r\n        }\r\n        if (!submitCount) {\r\n            submitCountRef.current = 0;\r\n        }\r\n        defaultRenderValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const value of Object.values(fieldsRef.current)) {\r\n                if (value) {\r\n                    const { ref, options } = value;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs(omitResetState);\r\n        reRender();\r\n    };\r\n    const getValues = (payload) => {\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    };\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            process.env.NODE_ENV === 'production' &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateCallback) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const control = Object.assign(Object.assign(Object.assign({ register,\r\n        unregister,\r\n        removeFieldEventListener,\r\n        getValues,\r\n        setValue,\r\n        reRender,\r\n        triggerValidation }, (shouldValidateCallback ? { validateSchemaIsValid } : {})), (isWatchAllRef.current ? {} : { watchFieldsRef })), { formState, mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n            isOnChange,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayDefaultValues,\r\n        validFieldsRef,\r\n        dirtyFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef });\r\n    return {\r\n        watch,\r\n        control,\r\n        handleSubmit,\r\n        setValue: useCallback(setValue, [\r\n            reRender,\r\n            setInternalValue,\r\n            triggerValidation,\r\n        ]),\r\n        triggerValidation,\r\n        getValues: useCallback(getValues, []),\r\n        reset: useCallback(reset, []),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultRenderValuesRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        clearError: useCallback(clearError, []),\r\n        setError: useCallback(setError, []),\r\n        errors: errorsRef.current,\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign({ [keyName]: generateId() }, (isObject(value) ? value : { value })));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map(value => appendId(value, keyName));\n\nconst removeAt = (data, index) => [\r\n    ...data.slice(0, index),\r\n    ...data.slice(index + 1),\r\n];\r\nfunction removeAtIndexes(data, index) {\r\n    let k = -1;\r\n    while (++k < data.length) {\r\n        if (index.indexOf(k) >= 0) {\r\n            delete data[k];\r\n        }\r\n    }\r\n    return data.filter(Boolean);\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : isArray(index)\r\n        ? removeAtIndexes(data, index)\r\n        : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (fields, indexA, indexB) => {\r\n    if (isArray(fields)) {\r\n        const temp = [fields[indexB], fields[indexA]];\r\n        fields[indexA] = temp[0];\r\n        fields[indexB] = temp[1];\r\n    }\r\n};\n\nvar prependAt = (data, value) => [\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data,\r\n];\n\nvar insertAt = (data, index, value) => [\r\n    ...data.slice(0, index),\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data.slice(index),\r\n];\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : undefined;\n\nconst { useEffect: useEffect$1, useCallback: useCallback$1, useRef: useRef$1, useState: useState$1 } = React;\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { resetFieldArrayFunctionRef, fieldArrayNamesRef, reRender, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, dirtyFieldsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldsRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValues, validateSchemaIsValid, } = control || methods.control;\r\n    const memoizedDefaultValues = useRef$1(fieldArrayDefaultValues.current[name] || [\r\n        ...get(defaultValuesRef.current, name, []),\r\n    ]);\r\n    const isNameKey = isKey(name);\r\n    const [fields, setField] = useState$1(mapIds(memoizedDefaultValues.current, keyName));\r\n    const [isDeleted, setIsDeleted] = useState$1(false);\r\n    const allFields = useRef$1(fields);\r\n    allFields.current = fields;\r\n    if (isNameKey) {\r\n        fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\r\n    }\r\n    const appendValueWithKey = (value) => value.map((v) => appendId(v, keyName));\r\n    const commonTasks = (fieldsValues) => {\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = getValues({ nest: true })[name];\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = true;\r\n            reRender();\r\n        }\r\n        commonTasks([\r\n            ...allFields.current,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n    };\r\n    const prepend = (value) => {\r\n        resetFields();\r\n        commonTasks(prependAt(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prependAt(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n            reRender();\r\n        }\r\n    };\r\n    const remove = (index) => {\r\n        let shouldRender = false;\r\n        if (!isUndefined(index)) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        commonTasks(removeArrayAt(allFields.current, index));\r\n        setIsDeleted(true);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n            if (!errorsRef.current[name].filter(Boolean).length) {\r\n                delete errorsRef.current[name];\r\n            }\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n            shouldRender = true;\r\n        }\r\n        if (readFormStateRef.current.dirty) {\r\n            dirtyFieldsRef.current.forEach(dirtyField => {\r\n                if (isUndefined(name) || dirtyField.startsWith(`${name}[${index}]`)) {\r\n                    dirtyFieldsRef.current.delete(dirtyField);\r\n                }\r\n            });\r\n            shouldRender = true;\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            let fieldIndex = -1;\r\n            let isFound = false;\r\n            const isIndexUndefined = isUndefined(index);\r\n            while (fieldIndex++ < fields.length) {\r\n                const isLast = fieldIndex === fields.length - 1;\r\n                const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\r\n                if (isCurrentIndex || isIndexUndefined) {\r\n                    isFound = true;\r\n                }\r\n                if (!isFound) {\r\n                    continue;\r\n                }\r\n                for (const key in fields[fieldIndex]) {\r\n                    const currentFieldName = `${name}[${fieldIndex}].${key}`;\r\n                    if (isCurrentIndex || isLast || isIndexUndefined) {\r\n                        validFieldsRef.current.delete(currentFieldName);\r\n                        fieldsWithValidationRef.current.delete(currentFieldName);\r\n                    }\r\n                    else {\r\n                        const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\r\n                        if (validFieldsRef.current.has(currentFieldName)) {\r\n                            validFieldsRef.current.add(previousFieldName);\r\n                        }\r\n                        if (fieldsWithValidationRef.current.has(currentFieldName)) {\r\n                            fieldsWithValidationRef.current.add(previousFieldName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            shouldRender = true;\r\n        }\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n    };\r\n    const insert = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        commonTasks(insertAt(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insertAt(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n            reRender();\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(allFields.current, indexA, indexB);\r\n        commonTasks([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n            reRender();\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(allFields.current, from, to);\r\n        commonTasks([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n            reRender();\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = [\r\n            ...get(defaultValuesRef.current, name, []),\r\n        ];\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect$1(() => {\r\n        if (isNameKey &&\r\n            isDeleted &&\r\n            fields.length < fieldArrayDefaultValues.current[name].length) {\r\n            fieldArrayDefaultValues.current[name].pop();\r\n        }\r\n    }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\r\n    useEffect$1(() => {\r\n        if (watchFieldsRef) {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    reRender();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }, [fields, name, reRender, watchFieldsRef]);\r\n    useEffect$1(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap: useCallback$1(swap, []),\r\n        move: useCallback$1(move, []),\r\n        prepend: useCallback$1(prepend, []),\r\n        append: useCallback$1(append, []),\r\n        remove: useCallback$1(remove, [fields]),\r\n        insert: useCallback$1(insert, []),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isCheckboxInput || isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control, onFocus } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur, isOnChange }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState$2(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef$2(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isOnChange,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (event) => {\r\n        const data = getInputValue(event, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (event) => {\r\n        const data = commonTask(event);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = () => {\r\n        if (isNameInFieldArray(fieldArrayNamesRef.current, name) &&\r\n            fieldsRef.current[name]) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name, focus: onFocus }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), Object.assign({}, rules));\r\n    };\r\n    useEffect$2(() => {\r\n        if (!fieldsRef.current[name]) {\r\n            registerField();\r\n            setInputStateValue(isUndefined(defaultValue)\r\n                ? get(defaultValuesRef.current, name)\r\n                : defaultValue);\r\n        }\r\n    });\r\n    useEffect$2(() => {\r\n        registerField();\r\n        return () => {\r\n            if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\r\n                unregister(name);\r\n            }\r\n        };\r\n    }, [name]);\r\n    useEffect$2(() => {\r\n        registerField();\r\n    }, [rules]);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur\r\n        ? {\r\n            [onBlurName]: (...args) => {\r\n                if (onBlur) {\r\n                    onBlur(args);\r\n                }\r\n                if (shouldReValidateOnBlur) {\r\n                    triggerValidation(name);\r\n                }\r\n            },\r\n        }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent)\r\n        ? cloneElement(InnerComponent, props)\r\n        : createElement(InnerComponent, props);\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.button, {\n      boxSizing: 'border-box',\n      minWidth: 64,\n      padding: '6px 16px',\n      borderRadius: theme.shape.borderRadius,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {\n        duration: theme.transitions.duration.short\n      }),\n      '&:hover': {\n        textDecoration: 'none',\n        backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        },\n        '&$disabled': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }),\n\n    /* Styles applied to the span element that wraps the children. */\n    label: {\n      width: '100%',\n      // Ensure the correct width for iOS Safari\n      display: 'inherit',\n      alignItems: 'inherit',\n      justifyContent: 'inherit'\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"`. */\n    text: {\n      padding: '6px 8px'\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`. */\n    textPrimary: {\n      color: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`. */\n    textSecondary: {\n      color: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      padding: '5px 15px',\n      border: \"1px solid \".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),\n      '&$disabled': {\n        border: \"1px solid \".concat(theme.palette.action.disabledBackground)\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`. */\n    outlinedPrimary: {\n      color: theme.palette.primary.main,\n      border: \"1px solid \".concat(fade(theme.palette.primary.main, 0.5)),\n      '&:hover': {\n        border: \"1px solid \".concat(theme.palette.primary.main),\n        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`. */\n    outlinedSecondary: {\n      color: theme.palette.secondary.main,\n      border: \"1px solid \".concat(fade(theme.palette.secondary.main, 0.5)),\n      '&:hover': {\n        border: \"1px solid \".concat(theme.palette.secondary.main),\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&$disabled': {\n        border: \"1px solid \".concat(theme.palette.action.disabled)\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"contained\"`. */\n    contained: {\n      color: theme.palette.getContrastText(theme.palette.grey[300]),\n      backgroundColor: theme.palette.grey[300],\n      boxShadow: theme.shadows[2],\n      '&:hover': {\n        backgroundColor: theme.palette.grey.A100,\n        boxShadow: theme.shadows[4],\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          boxShadow: theme.shadows[2],\n          backgroundColor: theme.palette.grey[300]\n        },\n        '&$disabled': {\n          backgroundColor: theme.palette.action.disabledBackground\n        }\n      },\n      '&$focusVisible': {\n        boxShadow: theme.shadows[6]\n      },\n      '&:active': {\n        boxShadow: theme.shadows[8]\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled,\n        boxShadow: theme.shadows[0],\n        backgroundColor: theme.palette.action.disabledBackground\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"contained\"` and `color=\"primary\"`. */\n    containedPrimary: {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.primary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"contained\"` and `color=\"secondary\"`. */\n    containedSecondary: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.secondary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.secondary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `disableElevation={true}`. */\n    disableElevation: {\n      boxShadow: 'none',\n      '&:hover': {\n        boxShadow: 'none'\n      },\n      '&$focusVisible': {\n        boxShadow: 'none'\n      },\n      '&:active': {\n        boxShadow: 'none'\n      },\n      '&$disabled': {\n        boxShadow: 'none'\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n    focusVisible: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit',\n      borderColor: 'currentColor'\n    },\n\n    /* Styles applied to the root element if `size=\"small\"` and `variant=\"text\"`. */\n    textSizeSmall: {\n      padding: '4px 5px',\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"` and `variant=\"text\"`. */\n    textSizeLarge: {\n      padding: '8px 11px',\n      fontSize: theme.typography.pxToRem(15)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"` and `variant=\"outlined\"`. */\n    outlinedSizeSmall: {\n      padding: '3px 9px',\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"` and `variant=\"outlined\"`. */\n    outlinedSizeLarge: {\n      padding: '7px 21px',\n      fontSize: theme.typography.pxToRem(15)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"` and `variant=\"contained\"`. */\n    containedSizeSmall: {\n      padding: '4px 10px',\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"` and `variant=\"contained\"`. */\n    containedSizeLarge: {\n      padding: '8px 22px',\n      fontSize: theme.typography.pxToRem(15)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {},\n\n    /* Styles applied to the root element if `size=\"large\"`. */\n    sizeLarge: {},\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Styles applied to the startIcon element if supplied. */\n    startIcon: {\n      display: 'inherit',\n      marginRight: 8,\n      marginLeft: -4,\n      '&$iconSizeSmall': {\n        marginLeft: -2\n      }\n    },\n\n    /* Styles applied to the endIcon element if supplied. */\n    endIcon: {\n      display: 'inherit',\n      marginRight: -4,\n      marginLeft: 8,\n      '&$iconSizeSmall': {\n        marginRight: -2\n      }\n    },\n\n    /* Styles applied to the icon element if supplied and `size=\"small\"`. */\n    iconSizeSmall: {\n      '& > *:first-child': {\n        fontSize: 18\n      }\n    },\n\n    /* Styles applied to the icon element if supplied and `size=\"medium\"`. */\n    iconSizeMedium: {\n      '& > *:first-child': {\n        fontSize: 20\n      }\n    },\n\n    /* Styles applied to the icon element if supplied and `size=\"large\"`. */\n    iconSizeLarge: {\n      '& > *:first-child': {\n        fontSize: 22\n      }\n    }\n  };\n};\nvar Button = React.forwardRef(function Button(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'button' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableElevati = props.disableElevation,\n      disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      endIconProp = props.endIcon,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      startIconProp = props.startIcon,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'button' : _props$type,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'text' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"disableElevation\", \"disableFocusRipple\", \"endIcon\", \"focusVisibleClassName\", \"fullWidth\", \"size\", \"startIcon\", \"type\", \"variant\"]);\n\n  var startIcon = startIconProp && /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.startIcon, classes[\"iconSize\".concat(capitalize(size))])\n  }, startIconProp);\n  var endIcon = endIconProp && /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.endIcon, classes[\"iconSize\".concat(capitalize(size))])\n  }, endIconProp);\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, classes[variant], className, color === 'inherit' ? classes.colorInherit : color !== 'default' && classes[\"\".concat(variant).concat(capitalize(color))], size !== 'medium' && [classes[\"\".concat(variant, \"Size\").concat(capitalize(size))], classes[\"size\".concat(capitalize(size))]], disableElevation && classes.disableElevation, disabled && classes.disabled, fullWidth && classes.fullWidth),\n    component: component,\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n    ref: ref,\n    type: type\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.label\n  }, startIcon, children, endIcon));\n});\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, no elevation is used.\n   */\n  disableElevation: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `focusVisibleClassName`.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * Element placed after the children.\n   */\n  endIcon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * Element placed before the children.\n   */\n  startIcon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  type: PropTypes.string,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['text', 'outlined', 'contained'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiButton'\n})(Button);"],"sourceRoot":""}