{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/react-hook-form/dist/react-hook-form.es.js","../node_modules/@material-ui/core/esm/Button/Button.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","isNullOrUndefined","isArray","Array","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","EVENTS","INPUT_VALIDATION_RULES","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","attachEventListeners","ref","field","handleChange","isRadioOrCheckbox","addEventListener","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","isUndefined","val","get","obj","defaultValue","split","filter","Boolean","focusOnErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","type","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","isEmptyObject","keys","castPath","parent","updatePath","baseGet","array","start","end","baseSlice","unset","paths","forEach","childObject","previousObjRef","k","slice","objectRef","currentPaths","currentPathsLength","item","baseUnset","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","option","disconnect","defaultReturn","isValid","getRadioValue","checked","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","map","attributes","getFieldValue","files","selected","isString","getFieldsValues","search","output","startsWith","find","nest","isSameError","types","message","objectA","objectB","objectAKeys","objectBKeys","every","compareObject","shouldRenderBasedOnError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isFunction","isBoolean","isMessage","isValidElement","getValidateError","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","a","required","maxLength","minLength","min","max","pattern","validate","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","_a","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validationResult","validateFunction","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","context","abortEarly","isPrimitive","getPath$1","parentPath","getPath","getInnerPath","pathWithIndex","flat","Infinity","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","add","skipValidation","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldArrayParentName","substring","indexOf","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","prev","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","modeChecker","mode","isRadioOrCheckboxFunction","useForm","reValidateMode","validationContext","defaultValues","submitFocusError","validateCriteriaMode","useRef","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","validationContextRef","fieldArrayNamesRef","useState","render","isWindowUndefined","shouldValidateSchemaOrResolver","isWeb","isProxyEnabled","Proxy","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","useCallback","shouldRenderBaseOnError","shouldRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldDirty","isFieldArray","previousDirtyFieldsLength","size","fieldArrayName","isDirtyChanged","setDirtyAndTouchedFields","setInternalValues","parentFieldName","isValueArray","setInternalValue","executeValidation","skipReRender","executeSchemaOrResolverValidation","payload","previousFormIsValid","triggerValidation","all","isFieldWatched","setValue","valueOrShouldValidate","shouldValidate","isArrayValue","isStringFieldName","target","currentError","shouldSkipValidation","shouldUpdateDirty","validateSchemaOrResolver","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","setError","watch","fieldNames","isDefaultValueUndefined","unregister","registerFieldsRef","validateOptions","console","warn","fieldRefAndValidationOptions","isEmptyDefaultValue","register","refOrValidationOptions","validationOptions","handleSubmit","callback","e","preventDefault","persist","fieldError","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","getValues","outputValues","useEffect","formState","commonProps","prop","control","validateSchemaIsValid","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","FormGlobalContext","createContext","useFormContext","useContext","Controller","rules","InnerComponent","as","onBlur","onChange","onChangeName","onBlurName","valueName","onFocus","rest","methods","setInputStateValue","valueRef","isCheckboxInput","shouldReValidateOnBlur","rulesRef","isNotFieldArray","commonTask","event","getInputValue","registerField","defineProperty","props","cloneElement","createElement","Button","React","children","classes","className","_props$color","color","_props$component","component","_props$disabled","disabled","_props$disableElevati","disableElevation","_props$disableFocusRi","disableFocusRipple","endIconProp","endIcon","focusVisibleClassName","_props$fullWidth","fullWidth","_props$size","startIconProp","startIcon","_props$type","_props$variant","variant","other","_objectWithoutProperties","clsx","concat","capitalize","ButtonBase","_extends","root","colorInherit","focusRipple","focusVisible","label","withStyles","theme","typography","button","boxSizing","minWidth","padding","borderRadius","shape","palette","text","primary","transition","transitions","create","duration","short","textDecoration","backgroundColor","fade","action","hoverOpacity","width","display","alignItems","justifyContent","textPrimary","main","textSecondary","secondary","outlined","border","disabledBackground","outlinedPrimary","outlinedSecondary","contained","getContrastText","grey","boxShadow","shadows","A100","containedPrimary","contrastText","dark","containedSecondary","borderColor","textSizeSmall","fontSize","pxToRem","textSizeLarge","outlinedSizeSmall","outlinedSizeLarge","containedSizeSmall","containedSizeLarge","sizeSmall","sizeLarge","marginRight","marginLeft","iconSizeSmall","iconSizeMedium","iconSizeLarge"],"mappings":"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","file":"static/js/3.c11381d0.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, cloneElement, Fragment } from 'react';\n\nvar isNullOrUndefined = (value) => value == null;\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\r\nconst REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners({ field: { ref }, handleChange, isRadioOrCheckbox, }) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const childObject = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    const result = !(childObject != null) || delete childObject[key];\r\n    let previousObjRef = undefined;\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index) {\r\n                if ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (isArray(objectRef) &&\r\n                        !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\r\n                            .length)) {\r\n                    previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n                }\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach((path) => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    const fieldValue = fields[name];\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.filter(Boolean).forEach((option, index) => {\r\n                const { ref, mutationWatcher } = option;\r\n                if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    unset(options, [`[${index}]`]);\r\n                }\r\n            });\r\n            if (options && !options.filter(Boolean).length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldValue, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMultipleSelect = (element) => element.type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : isArray(search)\r\n                    ? search.find((data) => name.startsWith(data))\r\n                    : search && search.nest)) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\r\n    const objectAKeys = Object.keys(objectA);\r\n    const objectBKeys = Object.keys(objectB);\r\n    return (objectAKeys.length === objectBKeys.length &&\r\n        objectAKeys.every((key) => objectB[key] && objectB[key] === objectA[key]));\r\n};\n\nvar isSameError = (error, { type, types, message, }) => isObject(error) &&\r\n    error.type === type &&\r\n    error.message === message &&\r\n    compareObject(error.types, types);\n\nfunction shouldRenderBasedOnError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isValueMessage = (value) => isObject(value) && !isRegex(value);\r\n    return isValueMessage(validationData)\r\n        ? validationData\r\n        : {\r\n            value: validationData,\r\n            message: '',\r\n        };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isMessage = (value) => isString(value) || (isObject(value) && isValidElement(value));\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (validateAllFieldCriteria) {\r\n        const error = errors[name];\r\n        return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n    }\r\n    return {};\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    var _a;\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\r\n        const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (path\r\n        ? previous[path] && validateAllFieldCriteria\r\n            ? {\r\n                [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n            }\r\n            : {\r\n                [path]: previous[path] || Object.assign({ message,\r\n                    type }, (validateAllFieldCriteria\r\n                    ? {\r\n                        types: { [type]: message || true },\r\n                    }\r\n                    : {})),\r\n            }\r\n        : {}))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => getPath(parentPath, value).flat(Infinity);\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value) ? get(combinedDefaultValues, fieldName) : value;\r\n};\n\nvar skipValidation = ({ isOnChange, hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnChange && isBlurEvent) ||\r\n    (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const fieldArrayDefaultValues = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const defaultValuesAtRenderRef = useRef({});\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const validationContextRef = useRef(validationContext);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit, isOnChange } = useRef(modeChecker(mode)).current;\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateSchemaOrResolver = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    validationContextRef.current = validationContext;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldRenderBasedOnError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateSchemaOrResolver) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !isNullOrUndefined(shouldRender)) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateSchemaOrResolver]);\r\n    const setFieldValue = useCallback((field, rawValue) => {\r\n        const { ref, options } = field;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isString(value)) {\r\n                ref.value = value;\r\n            }\r\n            else {\r\n                ref.files = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        let isFieldDirty = defaultValuesAtRenderRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        if (isFieldArray) {\r\n            const fieldArrayName = getFieldArrayParentName(name);\r\n            isFieldDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isFieldDirty;\r\n        if (isFieldDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray\r\n            ? isFieldDirty\r\n            : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    };\r\n    const setDirtyAndTouchedFields = useCallback((fieldName) => {\r\n        if (setDirty(fieldName) ||\r\n            (!get(touchedFieldsRef.current, fieldName) &&\r\n                readFormStateRef.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, fieldName, true);\r\n        }\r\n    }, []);\r\n    const setInternalValues = useCallback((name, value, parentFieldName) => {\r\n        const isValueArray = isArray(value);\r\n        for (const key in value) {\r\n            const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\r\n            const field = fieldsRef.current[fieldName];\r\n            if (isObject(value[key])) {\r\n                setInternalValues(name, value[key], fieldName);\r\n            }\r\n            if (field) {\r\n                setFieldValue(field, value[key]);\r\n                setDirtyAndTouchedFields(fieldName);\r\n            }\r\n        }\r\n    }, [setFieldValue, setDirtyAndTouchedFields]);\r\n    const setInternalValue = useCallback((name, value) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            setFieldValue(field, value);\r\n            const output = setDirtyAndTouchedFields(name);\r\n            if (isBoolean(output)) {\r\n                return output;\r\n            }\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value);\r\n        }\r\n    }, [setDirtyAndTouchedFields, setFieldValue, setInternalValues]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            shouldRenderBaseOnError(name, error, skipReRender ? null : false);\r\n            return isEmptyObject(error);\r\n        }\r\n        return false;\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach((name) => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            const error = get(errors, payload);\r\n            shouldRenderBaseOnError(payload, (error ? { [payload]: error } : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateSchemaOrResolver) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaOrResolverValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n    ]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    function setValue(names, valueOrShouldValidate, shouldValidate) {\r\n        let shouldRender = false;\r\n        const isArrayValue = isArray(names);\r\n        (isArrayValue\r\n            ? names\r\n            : [names]).forEach((name) => {\r\n            const isStringFieldName = isString(name);\r\n            shouldRender =\r\n                setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName\r\n                    ? valueOrShouldValidate\r\n                    : Object.values(name)[0]) || isArrayValue\r\n                    ? true\r\n                    : isFieldWatched(name);\r\n        });\r\n        if (shouldRender || isArrayValue) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate || (isArrayValue && valueOrShouldValidate)) {\r\n            triggerValidation(isArrayValue ? undefined : names);\r\n        }\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isOnChange,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldRender = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldRender = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldRender && reRender();\r\n            }\r\n            if (shouldValidateSchemaOrResolver) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldRender = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldRender) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaOrResolver = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationResolver]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => {\r\n        if (handleChangeRef.current && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultValuesAtRenderRef.current = unset(defaultValuesAtRenderRef.current, [name]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach((data) => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateSchemaOrResolver) {\r\n                validateSchemaOrResolver();\r\n            }\r\n        }\r\n    }, [\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n        validateSchemaOrResolver,\r\n        removeFieldEventListener,\r\n    ]);\r\n    function clearError(name) {\r\n        if (name) {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        else {\r\n            errorsRef.current = {};\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, shouldRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (shouldRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })), { shouldRender: true }));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach((error) => setInternalError(Object.assign({}, error)));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const watchFields = watchFieldsRef.current;\r\n        const isDefaultValueUndefined = isUndefined(defaultValue);\r\n        const combinedDefaultValues = isDefaultValueUndefined\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, {\r\n                [fieldNames]: isDefaultValueUndefined\r\n                    ? get(combinedDefaultValues, fieldNames)\r\n                    : defaultValue,\r\n            });\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) || combinedDefaultValues;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(name) {\r\n        if (fieldsRef.current) {\r\n            (isArray(name) ? name : [name]).forEach((fieldName) => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? field &&\r\n                isArray(field.options) &&\r\n                field.options.filter(Boolean).find((option) => {\r\n                    return value === option.ref.value && option.ref === ref;\r\n                })\r\n            : field && ref === field.ref) {\r\n            fields[name] = Object.assign(Object.assign({}, field), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(field));\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldRefAndValidationOptions), { mutationWatcher });\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = get(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(field, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateSchemaOrResolver &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaOrResolver();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, field).then((error) => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    isEmptyObject(error)\r\n                        ? validFieldsRef.current.add(name)\r\n                        : (isValidRef.current = false);\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultValuesAtRenderRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, field.ref) : defaultValue;\r\n        }\r\n        if (type) {\r\n            attachEventListeners({\r\n                field: isRadioOrCheckbox && field.options\r\n                    ? field.options[field.options.length - 1]\r\n                    : field,\r\n                isRadioOrCheckbox,\r\n                handleChange: handleChangeRef.current,\r\n            });\r\n        }\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        const fields = fieldsRef.current;\r\n        let fieldValues = getFieldsValues(fields);\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateSchemaOrResolver) {\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fields)) {\r\n                    if (field) {\r\n                        const { ref: { name }, } = field;\r\n                        const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            validFieldsRef.current.delete(name);\r\n                        }\r\n                        else {\r\n                            if (fieldsWithValidationRef.current.has(name)) {\r\n                                validFieldsRef.current.add(name);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                errorsRef.current = fieldErrors;\r\n                if (submitFocusError && isWeb) {\r\n                    focusOnErrorField(fields, fieldErrors);\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = ({ errors, dirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        fieldsRef.current = {};\r\n        if (!errors) {\r\n            errorsRef.current = {};\r\n        }\r\n        if (!touched) {\r\n            touchedFieldsRef.current = {};\r\n        }\r\n        if (!isValid) {\r\n            validFieldsRef.current = new Set();\r\n            fieldsWithValidationRef.current = new Set();\r\n            isValidRef.current = true;\r\n        }\r\n        if (!dirty) {\r\n            isDirtyRef.current = false;\r\n        }\r\n        if (!dirtyFields) {\r\n            dirtyFieldsRef.current = new Set();\r\n        }\r\n        if (!isSubmitted) {\r\n            isSubmittedRef.current = false;\r\n        }\r\n        if (!submitCount) {\r\n            submitCountRef.current = 0;\r\n        }\r\n        defaultValuesAtRenderRef.current = {};\r\n        fieldArrayDefaultValues.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs(omitResetState);\r\n        reRender();\r\n    };\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return fieldsRef.current[payload]\r\n                ? getFieldValue(fieldsRef.current, fieldsRef.current[payload].ref)\r\n                : undefined;\r\n        }\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    }\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            process.env.NODE_ENV === 'production' &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateSchemaOrResolver) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const commonProps = {\r\n        triggerValidation,\r\n        setValue: useCallback(setValue, [\r\n            reRender,\r\n            setInternalValue,\r\n            triggerValidation,\r\n        ]),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultValuesAtRenderRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        getValues: useCallback(getValues, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = Object.assign(Object.assign(Object.assign({ removeFieldEventListener,\r\n        reRender }, (shouldValidateSchemaOrResolver\r\n        ? { validateSchemaIsValid: validateSchemaOrResolver }\r\n        : {})), { mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n            isOnChange,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        isWatchAllRef,\r\n        watchFieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayDefaultValues,\r\n        validFieldsRef,\r\n        dirtyFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef }), commonProps);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: useCallback(reset, []), clearError: useCallback(clearError, []), setError: useCallback(setError, []), errors: errorsRef.current }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign({ [keyName]: generateId() }, (isObject(value) ? value : { value })));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nvar getSortRemovedItems = (indexes, removeIndexes, updatedIndexes = [], count = 0, notFoundIndexes = []) => {\r\n    for (const removeIndex of removeIndexes) {\r\n        if (indexes.indexOf(removeIndex) < 0) {\r\n            notFoundIndexes.push(removeIndex);\r\n        }\r\n    }\r\n    for (const index of indexes.sort()) {\r\n        if (removeIndexes.indexOf(index) > -1) {\r\n            updatedIndexes.push(-1);\r\n            count++;\r\n        }\r\n        else {\r\n            updatedIndexes.push(index -\r\n                count -\r\n                (notFoundIndexes.length\r\n                    ? notFoundIndexes\r\n                        .map((notFoundIndex) => notFoundIndex < index)\r\n                        .filter(Boolean).length\r\n                    : 0));\r\n        }\r\n    }\r\n    return updatedIndexes;\r\n};\n\nconst removeAt = (data, index) => [\r\n    ...data.slice(0, index),\r\n    ...data.slice(index + 1),\r\n];\r\nfunction removeAtIndexes(data, index) {\r\n    let k = -1;\r\n    while (++k < data.length) {\r\n        if (index.indexOf(k) >= 0) {\r\n            delete data[k];\r\n        }\r\n    }\r\n    return data.filter(Boolean);\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : isArray(index)\r\n        ? removeAtIndexes(data, index)\r\n        : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(isArray(value) ? value : [value || null]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(isArray(value) ? value : [value || null]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : null;\n\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { isWatchAllRef, resetFieldArrayFunctionRef, fieldArrayNamesRef, reRender, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, dirtyFieldsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldsRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValues, validateSchemaIsValid, } = control || methods.control;\r\n    const getDefaultValues = () => [\r\n        ...get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\r\n            ? fieldArrayDefaultValues.current\r\n            : defaultValuesRef.current, name, []),\r\n    ];\r\n    const memoizedDefaultValues = useRef(getDefaultValues());\r\n    const [fields, setField] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    const [isDeleted, setIsDeleted] = useState(false);\r\n    const allFields = useRef(fields);\r\n    const isNameKey = isKey(name);\r\n    allFields.current = fields;\r\n    if (isNameKey) {\r\n        fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\r\n    }\r\n    const appendValueWithKey = (values) => values.map((value) => appendId(value, keyName));\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const modifyDirtyFields = ({ shouldRender, isRemove, isPrePend, index, value = {}, } = {}) => {\r\n        let render = shouldRender;\r\n        const values = isArray(value) ? value : [value];\r\n        if (readFormStateRef.current.dirty) {\r\n            const dirtyFieldIndexesAndValues = {};\r\n            if (isPrePend || isRemove) {\r\n                for (const dirtyField of [...dirtyFieldsRef.current].sort()) {\r\n                    if (isMatchFieldArrayName(dirtyField, name)) {\r\n                        const matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\r\n                        if (matchedIndexes) {\r\n                            const matchIndex = +matchedIndexes[matchedIndexes.length - 1];\r\n                            if (dirtyFieldIndexesAndValues[matchIndex]) {\r\n                                dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\r\n                            }\r\n                            else {\r\n                                dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\r\n                            }\r\n                        }\r\n                        dirtyFieldsRef.current.delete(dirtyField);\r\n                    }\r\n                }\r\n            }\r\n            if (!isUndefined(index) || isPrePend) {\r\n                const updatedDirtyFieldIndexes = isUndefined(index)\r\n                    ? []\r\n                    : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map((i) => +i), isArray(index) ? index : [index]);\r\n                Object.values(dirtyFieldIndexesAndValues).forEach((values, index) => {\r\n                    const updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\r\n                    if (updateIndex > -1) {\r\n                        for (const value of values) {\r\n                            const matchedIndexes = value.match(REGEX_ARRAY_FIELD_INDEX);\r\n                            if (matchedIndexes) {\r\n                                dirtyFieldsRef.current.add(value.replace(/[\\d+]([^[\\d+]+)$/, `${isPrePend\r\n                                    ? +matchedIndexes[matchedIndexes.length - 1] +\r\n                                        values.length\r\n                                    : updateIndex}$1`));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (!isRemove) {\r\n                values.forEach((fieldValue, index) => Object.keys(fieldValue).forEach((key) => dirtyFieldsRef.current.add(`${name}[${isPrePend ? index : allFields.current.length + index}].${key}`)));\r\n                isDirtyRef.current = true;\r\n            }\r\n            render = true;\r\n        }\r\n        if (render && !isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = get(getValues({ nest: true }), name);\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        setFieldAndValidState([\r\n            ...allFields.current,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n        modifyDirtyFields({ value });\r\n    };\r\n    const prepend$1 = (value) => {\r\n        let shouldRender = false;\r\n        resetFields();\r\n        setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n            shouldRender = true;\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isPrePend: true,\r\n            value,\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        let shouldRender = false;\r\n        const isIndexUndefined = isUndefined(index);\r\n        if (!isIndexUndefined) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(removeArrayAt(allFields.current, index));\r\n        setIsDeleted(true);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n            if (!errorsRef.current[name].filter(Boolean).length) {\r\n                delete errorsRef.current[name];\r\n            }\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n            shouldRender = true;\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            let fieldIndex = -1;\r\n            let isFound = false;\r\n            const isIndexUndefined = isUndefined(index);\r\n            while (fieldIndex++ < fields.length) {\r\n                const isLast = fieldIndex === fields.length - 1;\r\n                const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\r\n                if (isCurrentIndex || isIndexUndefined) {\r\n                    isFound = true;\r\n                }\r\n                if (!isFound) {\r\n                    continue;\r\n                }\r\n                for (const key in fields[fieldIndex]) {\r\n                    const currentFieldName = `${name}[${fieldIndex}].${key}`;\r\n                    if (isCurrentIndex || isLast || isIndexUndefined) {\r\n                        validFieldsRef.current.delete(currentFieldName);\r\n                        fieldsWithValidationRef.current.delete(currentFieldName);\r\n                    }\r\n                    else {\r\n                        const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\r\n                        if (validFieldsRef.current.has(currentFieldName)) {\r\n                            validFieldsRef.current.add(previousFieldName);\r\n                        }\r\n                        if (fieldsWithValidationRef.current.has(currentFieldName)) {\r\n                            fieldsWithValidationRef.current.add(previousFieldName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isRemove: true,\r\n            index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n            reRender();\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(allFields.current, indexA, indexB);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n            reRender();\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(allFields.current, from, to);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n            reRender();\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = getDefaultValues();\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect(() => {\r\n        if (isNameKey &&\r\n            isDeleted &&\r\n            fieldArrayDefaultValues.current[name] &&\r\n            fields.length < fieldArrayDefaultValues.current[name].length) {\r\n            fieldArrayDefaultValues.current[name].pop();\r\n        }\r\n    }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\r\n    useEffect(() => {\r\n        if (isWatchAllRef && isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n        else if (watchFieldsRef) {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    reRender();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name]),\r\n        remove: useCallback(remove, [fields, name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isCheckboxInput || isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control, onFocus } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur, isOnChange }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const rulesRef = useRef(rules);\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    rulesRef.current = rules;\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isOnChange,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (event) => {\r\n        const data = getInputValue(event, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (event) => {\r\n        const data = commonTask(event);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = useCallback(() => {\r\n        if (!isNotFieldArray && fieldsRef.current[name]) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name, focus: onFocus }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), rulesRef.current);\r\n    }, [\r\n        isNotFieldArray,\r\n        fieldsRef,\r\n        rulesRef,\r\n        name,\r\n        onFocus,\r\n        register,\r\n        removeFieldEventListener,\r\n    ]);\r\n    useEffect(() => () => unregister(name), [unregister, name]);\r\n    useEffect(() => {\r\n        registerField();\r\n    }, [registerField]);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    useEffect(() => {\r\n        if (!fieldsRef.current[name]) {\r\n            registerField();\r\n            if (isNotFieldArray) {\r\n                setInputStateValue(isUndefined(defaultValue)\r\n                    ? get(defaultValuesRef.current, name)\r\n                    : defaultValue);\r\n            }\r\n        }\r\n    });\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur\r\n        ? {\r\n            [onBlurName]: (...args) => {\r\n                if (onBlur) {\r\n                    onBlur(args);\r\n                }\r\n                if (shouldReValidateOnBlur) {\r\n                    triggerValidation(name);\r\n                }\r\n            },\r\n        }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent)\r\n        ? cloneElement(InnerComponent, props)\r\n        : createElement(InnerComponent, props);\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.button, {\n      boxSizing: 'border-box',\n      minWidth: 64,\n      padding: '6px 16px',\n      borderRadius: theme.shape.borderRadius,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {\n        duration: theme.transitions.duration.short\n      }),\n      '&:hover': {\n        textDecoration: 'none',\n        backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        },\n        '&$disabled': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }),\n\n    /* Styles applied to the span element that wraps the children. */\n    label: {\n      width: '100%',\n      // Ensure the correct width for iOS Safari\n      display: 'inherit',\n      alignItems: 'inherit',\n      justifyContent: 'inherit'\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"`. */\n    text: {\n      padding: '6px 8px'\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`. */\n    textPrimary: {\n      color: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`. */\n    textSecondary: {\n      color: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      padding: '5px 15px',\n      border: \"1px solid \".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),\n      '&$disabled': {\n        border: \"1px solid \".concat(theme.palette.action.disabledBackground)\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`. */\n    outlinedPrimary: {\n      color: theme.palette.primary.main,\n      border: \"1px solid \".concat(fade(theme.palette.primary.main, 0.5)),\n      '&:hover': {\n        border: \"1px solid \".concat(theme.palette.primary.main),\n        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`. */\n    outlinedSecondary: {\n      color: theme.palette.secondary.main,\n      border: \"1px solid \".concat(fade(theme.palette.secondary.main, 0.5)),\n      '&:hover': {\n        border: \"1px solid \".concat(theme.palette.secondary.main),\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&$disabled': {\n        border: \"1px solid \".concat(theme.palette.action.disabled)\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"contained\"`. */\n    contained: {\n      color: theme.palette.getContrastText(theme.palette.grey[300]),\n      backgroundColor: theme.palette.grey[300],\n      boxShadow: theme.shadows[2],\n      '&:hover': {\n        backgroundColor: theme.palette.grey.A100,\n        boxShadow: theme.shadows[4],\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          boxShadow: theme.shadows[2],\n          backgroundColor: theme.palette.grey[300]\n        },\n        '&$disabled': {\n          backgroundColor: theme.palette.action.disabledBackground\n        }\n      },\n      '&$focusVisible': {\n        boxShadow: theme.shadows[6]\n      },\n      '&:active': {\n        boxShadow: theme.shadows[8]\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled,\n        boxShadow: theme.shadows[0],\n        backgroundColor: theme.palette.action.disabledBackground\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"contained\"` and `color=\"primary\"`. */\n    containedPrimary: {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.primary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"contained\"` and `color=\"secondary\"`. */\n    containedSecondary: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.secondary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.secondary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `disableElevation={true}`. */\n    disableElevation: {\n      boxShadow: 'none',\n      '&:hover': {\n        boxShadow: 'none'\n      },\n      '&$focusVisible': {\n        boxShadow: 'none'\n      },\n      '&:active': {\n        boxShadow: 'none'\n      },\n      '&$disabled': {\n        boxShadow: 'none'\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n    focusVisible: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit',\n      borderColor: 'currentColor'\n    },\n\n    /* Styles applied to the root element if `size=\"small\"` and `variant=\"text\"`. */\n    textSizeSmall: {\n      padding: '4px 5px',\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"` and `variant=\"text\"`. */\n    textSizeLarge: {\n      padding: '8px 11px',\n      fontSize: theme.typography.pxToRem(15)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"` and `variant=\"outlined\"`. */\n    outlinedSizeSmall: {\n      padding: '3px 9px',\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"` and `variant=\"outlined\"`. */\n    outlinedSizeLarge: {\n      padding: '7px 21px',\n      fontSize: theme.typography.pxToRem(15)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"` and `variant=\"contained\"`. */\n    containedSizeSmall: {\n      padding: '4px 10px',\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"` and `variant=\"contained\"`. */\n    containedSizeLarge: {\n      padding: '8px 22px',\n      fontSize: theme.typography.pxToRem(15)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {},\n\n    /* Styles applied to the root element if `size=\"large\"`. */\n    sizeLarge: {},\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Styles applied to the startIcon element if supplied. */\n    startIcon: {\n      display: 'inherit',\n      marginRight: 8,\n      marginLeft: -4,\n      '&$iconSizeSmall': {\n        marginLeft: -2\n      }\n    },\n\n    /* Styles applied to the endIcon element if supplied. */\n    endIcon: {\n      display: 'inherit',\n      marginRight: -4,\n      marginLeft: 8,\n      '&$iconSizeSmall': {\n        marginRight: -2\n      }\n    },\n\n    /* Styles applied to the icon element if supplied and `size=\"small\"`. */\n    iconSizeSmall: {\n      '& > *:first-child': {\n        fontSize: 18\n      }\n    },\n\n    /* Styles applied to the icon element if supplied and `size=\"medium\"`. */\n    iconSizeMedium: {\n      '& > *:first-child': {\n        fontSize: 20\n      }\n    },\n\n    /* Styles applied to the icon element if supplied and `size=\"large\"`. */\n    iconSizeLarge: {\n      '& > *:first-child': {\n        fontSize: 22\n      }\n    }\n  };\n};\nvar Button = React.forwardRef(function Button(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'button' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableElevati = props.disableElevation,\n      disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      endIconProp = props.endIcon,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      startIconProp = props.startIcon,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'button' : _props$type,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'text' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"disableElevation\", \"disableFocusRipple\", \"endIcon\", \"focusVisibleClassName\", \"fullWidth\", \"size\", \"startIcon\", \"type\", \"variant\"]);\n\n  var startIcon = startIconProp && /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.startIcon, classes[\"iconSize\".concat(capitalize(size))])\n  }, startIconProp);\n  var endIcon = endIconProp && /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.endIcon, classes[\"iconSize\".concat(capitalize(size))])\n  }, endIconProp);\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, classes[variant], className, color === 'inherit' ? classes.colorInherit : color !== 'default' && classes[\"\".concat(variant).concat(capitalize(color))], size !== 'medium' && [classes[\"\".concat(variant, \"Size\").concat(capitalize(size))], classes[\"size\".concat(capitalize(size))]], disableElevation && classes.disableElevation, disabled && classes.disabled, fullWidth && classes.fullWidth),\n    component: component,\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n    ref: ref,\n    type: type\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.label\n  }, startIcon, children, endIcon));\n});\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, no elevation is used.\n   */\n  disableElevation: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `focusVisibleClassName`.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * Element placed after the children.\n   */\n  endIcon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * Element placed before the children.\n   */\n  startIcon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  type: PropTypes.string,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['text', 'outlined', 'contained'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiButton'\n})(Button);"],"sourceRoot":""}